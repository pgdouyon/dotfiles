#!/usr/bin/env ruby

require 'io/console'

VALID_CHAR = '[^\[\]\s]'.freeze
UPSTREAM_NAME_RE = /(?<name>#{VALID_CHAR}+?\/#{VALID_CHAR}+)/.source
UPSTREAM_INFO_RE = /:\s(?<info>#{VALID_CHAR}+)/.source
UPSTREAM_REGEXP = /\A\[#{UPSTREAM_NAME_RE}(?:#{UPSTREAM_INFO_RE})?\]/

SEPARATOR = "\n\n".freeze

def current_branch
  `git rev-parse --abbrev-ref HEAD`.strip
end

def local_branches
  list_branches.map(&:strip)
end

def remote_branches
  list_branches('-r').map(&:strip)
end

def upstream_branches
  list_branches('-vv').map do |branch|
    branch_info = parse_branch(branch)
    branch_info[:upstream_name] || 'origin/' << branch_info[:local]
  end
end

def gone_branches
  list_branches('-vv')
    .select { |branch| gone?(branch) }
    .map { |branch| parse_branch(branch)[:local] }
end

def list_branches(*args)
  `git branch #{args.join(' ')} | cut -c 3-`
    .lines
    .reject { |branch| pointer?(branch) }
end

def pointer?(branch)
  branch =~ /\s->\s/
end

def gone?(branch)
  parse_branch(branch)[:upstream_info] == 'gone'
end

def parse_branch(branch)
  branch_parts = branch.split(/\s+/, 3)
  upstream_match = branch_parts[2].match(UPSTREAM_REGEXP)
  {
    local: branch_parts[0],
    sha: branch_parts[1],
    upstream_name: upstream_match && upstream_match['name'],
    upstream_info: upstream_match && upstream_match['info']
  }
end

def delete_branches(branches, message, *args)
  return if branches.nil? || branches.empty?

  puts message
  branches.each_slice(20).each do |branch_batch|
    branch_args = branch_batch.map { |b| format('"%s"', b) }.join(' ')
    puts "Deleting #{branch_batch.join(' ')}"
    `git branch -d #{args.join(' ')} #{branch_args}`
    puts SEPARATOR
  end
end

def confirm(message)
  puts message
  response = STDIN.getch
  exit(1) if response !~ /\w/
  response =~ /[yY]/
end

puts `git remote prune origin`

gone_branches.each do |branch|
  puts `git branch --unset-upstream #{branch}`
end

delete_branches((remote_branches - upstream_branches),
                'Deleting non-tracking branches...',
                '-r')

puts 'Looping through local branches...'
local_branches.each do |branch|
  next if ['master', current_branch].include?(branch)

  system("clear")
  puts
  puts branch.to_s
  puts "\t" << `git branch -vv --list #{branch}`.strip
  puts "\t" << `git show -s #{branch}`
  puts

  system("git show #{branch}") if confirm 'Show commit? [y|n]'
  next unless confirm "Do you want to delete #{branch}? [y|n]"
  next if system("git branch -d #{branch}")

  if confirm "Do you want to FORCE delete #{branch}? [y|n]"
    system("git branch -D #{branch}")
  end
end

puts 'All remote branches up to date'
exit(0)
