#!/usr/bin/env ruby

require 'io/console'

def remote_branches
  `git branch -r | cut -c 3-`.lines
    .reject { |branch| pointer?(branch) }
    .map(&:strip)
end

def upstream_branches
  `git branch -vv | cut -c 3-`.lines.reject { |branch| pointer?(branch) }
    .map do |branch|
      branch_parts = branch.split
      local = branch_parts[0]
      upstream = branch_parts[2][/^\[(\S+)\]$/, 1]
      blank?(upstream) ? 'origin/' << local : upstream
    end
end

def blank?(s)
  s.to_s.strip.empty?
end

def pointer?(branch)
  branch =~ /\s->\s/
end

non_tracking_branches = remote_branches - upstream_branches
if non_tracking_branches.empty?
  puts 'All remote branches up to date'
  exit(0)
end

loop do
  puts "Found #{non_tracking_branches.size} non-tracking remote branches"
  puts
  puts 'Please enter:'
  puts '[p|preview] to see the branches before deleting'
  puts '[y|yes] to confirm deletion'
  puts '[n|no] to abort deletion'

  case STDIN.getch
  when 'p'
    puts "\n\t#{non_tracking_branches.join("\n\t")}"
    puts
    puts
  when 'y'
    puts 'Deleting non-tracking branches...'
    non_tracking_branches.each_slice(20).each do |branches|
      puts "Deleting #{branches.join(' ')}"
      `git branch -r -d #{branches.map { |b| format('"%s"', b) }.join(' ')}`
      puts
      puts
    end
    exit(0)
  when 'n'
    puts 'Aborting...'
    exit(1)
  end
end
